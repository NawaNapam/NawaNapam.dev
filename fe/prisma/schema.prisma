// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 

// users

model User {
  id            String          @id @default(uuid())
  name          String?
  username      String?         @unique
  email         String          @unique
  emailVerified DateTime?
  passwordHash String?
  isAnonymous  Boolean         @default(true)
  banned       Boolean         @default(false)
  image         String?


  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  chatRooms     ChatRoom[]      @relation("ChatRoomParticipants")
  messages      Message[]
  reportsMade   Report[]        @relation("ReportsByUser")
  reportsAgainst Report[]       @relation("ReportsAgainstUser")
  moderationLogs ModerationLog[]
  interests     Interest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isAnonymous])
  @@index([banned])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expires])
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
  @@index([expires])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
  @@index([userId])
}

model ChatRoom {
  id            String   @id @default(uuid())
  status        ChatRoomStatus @default(WAITING)
  topicTags     String[]
  createdAt     DateTime @default(now())
  endedAt       DateTime?
  lastMessageAt DateTime?

  participants  User[] @relation("ChatRoomParticipants")
  messages      Message[]
  reports       Report[]        // Opposite relation field for Report.room
  
   @@index([status])
  @@index([createdAt])
  @@index([lastMessageAt])

}

enum ChatRoomStatus {
  WAITING
  ACTIVE
  ENDED
}

model Message {
  id        String   @id @default(uuid())
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  type      MessageType
  content   String
  createdAt DateTime @default(now())
  flagged   Boolean  @default(false)

  reports   Report[]

  
  @@index([roomId])
  @@index([senderId])
  @@index([createdAt])
  @@index([flagged])
}
enum MessageType {
  TEXT
  SIGNAL
  IMAGE
  VIDEO_CHUNK
}

model Report {
  id              String   @id @default(uuid())
  reporter        User     @relation("ReportsByUser", fields: [reporterId], references: [id])
  reporterId      String
  reportedUser    User     @relation("ReportsAgainstUser", fields: [reportedUserId], references: [id])
  reportedUserId  String
  room            ChatRoom? @relation(fields: [roomId], references: [id])
  roomId          String?
  message         Message? @relation(fields: [messageId], references: [id])
  messageId       String?
  reason          String
  status          ReportStatus @default(PENDING)
  createdAt       DateTime @default(now())
  reviewedBy      String?

  @@index([reporterId])
  @@index([reportedUserId])
  @@index([roomId])
  @@index([messageId])
  @@index([status])
  @@index([createdAt])
}

enum ReportStatus {
  PENDING
  REVIEWED
  ACTION_TAKEN
}

model Interest {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  tags   String[]

  @@index([userId])
}

model ModerationLog {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  action      ModerationAction
  reason      String?
  createdAt   DateTime @default(now())
  performedBy String   // moderator userId

  
  @@index([userId])
  @@index([createdAt])
}

enum ModerationAction {
  BAN
  WARN
  MUTE
} 